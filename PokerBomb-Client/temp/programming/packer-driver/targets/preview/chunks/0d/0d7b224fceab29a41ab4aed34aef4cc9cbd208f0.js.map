{"version":3,"sources":["file:///D:/CocosProjects/PokerBomb/assets/Script/LoginClient.ts"],"names":["_decorator","Component","EventTarget","ccclass","property","eventtarget","globalThis","_eventtarget","LoginClient","start","_init","update","deltaTime","_connectServer","ws","WebSocket","onopen","console","log","send","onmessage","result","message","data","type","responseServerMessage","onclose","onerror","err","emit"],"mappings":";;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;;;;;;;OAChC;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;AAExBK,MAAAA,W,GAAc,IAAIH,WAAJ,E;AACpBI,MAAAA,UAAU,CAACC,YAAX,GAA0BF,WAA1B,C,CAAsC;;6BAGzBG,W,WADZL,OAAO,CAAC,aAAD,C,gBAAR,MACaK,WADb,SACiCP,SADjC,CAC2C;AACvCQ,QAAAA,KAAK,GAAG;AACJ,eAAKC,KAAL;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEOF,QAAAA,KAAK,GAAG;AACZ,eAAKG,cAAL;AACH;;AAEOA,QAAAA,cAAc,GAAE;AACpB,cAAIC,EAAE,GAAG,IAAIC,SAAJ,CAAc,iCAAd,CAAT;;AACAD,UAAAA,EAAE,CAACE,MAAH,GAAY,MAAI;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAJ,YAAAA,EAAE,CAACK,IAAH,CAAQ,kBAAR;AACH,WAHD;;AAIAL,UAAAA,EAAE,CAACM,SAAH,GAAgBC,MAAD,IAAU;AACrB,gBAAIC,OAAO,GAAGD,MAAM,CAACE,IAArB;AACAN,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBI,OAAxB;AACA,gBAAIE,IAAI,GAAGF,OAAO,CAACE,IAAnB;AACA,gBAAID,IAAI,GAAGD,OAAO,CAACC,IAAnB;AAEA,iBAAKE,qBAAL,CAA2BD,IAA3B,EAAiCD,IAAjC;AACH,WAPD;;AAQAT,UAAAA,EAAE,CAACY,OAAH,GAAa,MAAI;AACbT,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH,WAFD;;AAGAJ,UAAAA,EAAE,CAACa,OAAH,GAAcC,GAAD,IAAO;AAChBX,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBU,GAAtB;AACH,WAFD;AAGH;AAED;AACJ;AACA;;;AAEWH,QAAAA,qBAAqB,CAACD,IAAD,EAAOD,IAAP,EAAY;AACpCjB,UAAAA,UAAU,CAACC,YAAX,CAAwBsB,IAAxB,CAA6BL,IAA7B,EAAmCD,IAAnC;AACH;;AAzCsC,O","sourcesContent":["import { _decorator, Component, Node, EventTarget} from 'cc';\nconst { ccclass, property } = _decorator;\n\nconst eventtarget = new EventTarget();\nglobalThis._eventtarget = eventtarget;//globalThis是全局的\n\n@ccclass('LoginClient')\nexport class LoginClient extends Component {\n    start() {\n        this._init();\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    private _init() {\n        this._connectServer();\n    }\n\n    private _connectServer(){\n        let ws = new WebSocket(\"ws:127.0.0.1:9090/websocket/wyp\");\n        ws.onopen = ()=>{\n            console.log(\"连接成功\");\n            ws.send(\"你好啊，服务器，我是wyp客户端\");\n        }\n        ws.onmessage = (result)=>{\n            let message = result.data;\n            console.log(\"接收到服务器消息：\",message);\n            let type = message.type;\n            let data = message.data;\n\n            this.responseServerMessage(type, data);\n        }\n        ws.onclose = ()=>{\n            console.log(\"与服务器断开连接\");\n        }\n        ws.onerror = (err)=>{\n            console.log(\"网络连接出错：\",err);\n        }\n    }\n\n    /**\n     * 响应服务端消息 type-->消息类型，  data-->消息数据\n     */\n\n    public responseServerMessage(type, data){\n        globalThis._eventtarget.emit(type, data);\n    }\n}\n\n"]}