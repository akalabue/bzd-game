{"version":3,"sources":["file:///D:/CocosProjects/PokerBomb/assets/Script/hallScene/HallClient.ts"],"names":["_decorator","Component","ccclass","property","HallClient","_ws","start","_init","update","deltaTime","globalThis","_hallClientMgr","_connectServer","ws","WebSocket","onopen","console","log","onmessage","result","message","data","obj","JSON","parse","_data","_type","type","responseServerMessage","onclose","onerror","err","_eventtarget","emit","sendMessage","sendData","send","stringify"],"mappings":";;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;OACf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;4BAGjBI,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCH,SADhC,CAC0C;AAAA;AAAA;AAAA,eAC9BI,GAD8B,GAClB,IADkB;AAAA;;AAGtCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,KAAL;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEOF,QAAAA,KAAK,GAAG;AACZG,UAAAA,UAAU,CAACC,cAAX,GAA4B,IAA5B,CADY,CACqB;;AACjC,eAAKC,cAAL;AACH;;AAEOA,QAAAA,cAAc,GAAE;AACpB,cAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,kCAAd,CAAX;AACA,eAAKT,GAAL,GAAWQ,EAAX;;AACAA,UAAAA,EAAE,CAACE,MAAH,GAAY,MAAI;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,WAFD;;AAGAJ,UAAAA,EAAE,CAACK,SAAH,GAAgBC,MAAD,IAAU;AACrB,gBAAIC,OAAO,GAAGD,MAAM,CAACE,IAArB;AACA,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAV;AACAJ,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BK,GAA1B;AACA,gBAAIG,KAAK,GAAGH,GAAG,CAACD,IAAhB;AACA,gBAAIK,KAAK,GAAGJ,GAAG,CAACK,IAAhB,CALqB,CAMrB;;AACA,iBAAKC,qBAAL,CAA2BF,KAA3B,EAAkCD,KAAlC;AACH,WARD;;AASAZ,UAAAA,EAAE,CAACgB,OAAH,GAAa,MAAI;AACbb,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH,WAFD;;AAGAJ,UAAAA,EAAE,CAACiB,OAAH,GAAcC,GAAD,IAAO;AAChBf,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2Bc,GAA3B;AACH,WAFD;AAGH;AAED;AACJ;AACA;;;AAEWH,QAAAA,qBAAqB,CAACD,IAAD,EAAON,IAAP,EAAY;AACpCX,UAAAA,UAAU,CAACsB,YAAX,CAAwBC,IAAxB,CAA6BN,IAA7B,EAAmCN,IAAnC;AACH;;AAEOa,QAAAA,WAAW,CAACR,KAAD,EAAQD,KAAR,EAAc;AAC7B,cAAIU,QAAQ,GAAG;AACXR,YAAAA,IAAI,EAAED,KADK;AAEXL,YAAAA,IAAI,EAAEI;AAFK,WAAf;;AAIA,eAAKpB,GAAL,CAAS+B,IAAT,CAAcb,IAAI,CAACc,SAAL,CAAeF,QAAf,CAAd,EAL6B,CAKW;;AAC3C;;AArDqC,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('HallClient')\nexport class HallClient extends Component {\n    private _ws : any = null;\n\n    start() {\n        this._init();\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    private _init() {\n        globalThis._hallClientMgr = this;//使得全局能够获取此对象\n        this._connectServer();\n    }\n\n    private _connectServer(){\n        const ws = new WebSocket(\"ws:127.0.0.1:9091/websocket/hall\");\n        this._ws = ws;\n        ws.onopen = ()=>{\n            console.log(\"连接大厅服务器成功\");\n        }\n        ws.onmessage = (result)=>{\n            let message = result.data;\n            let obj = JSON.parse(message);\n            console.log(\"大厅接收到服务器消息：\",obj);\n            let _data = obj.data;\n            let _type = obj.type;\n            // console.log(\"服务端发送数据--> 类型：\", _type, \" 数据：\", _data)\n            this.responseServerMessage(_type, _data);\n        }\n        ws.onclose = ()=>{\n            console.log(\"与大厅服务器断开连接\");\n        }\n        ws.onerror = (err)=>{\n            console.log(\"大厅服务器网络连接出错：\",err);\n        }\n    }\n\n    /**\n     * 响应服务端消息 type-->消息类型，  data-->消息数据\n     */\n\n    public responseServerMessage(type, data){\n        globalThis._eventtarget.emit(type, data);\n    }\n\n    private sendMessage(_type, _data){\n        let sendData = {\n            type: _type,\n            data: _data\n        }\n        this._ws.send(JSON.stringify(sendData));//将javascript对象转为字符串\n    }\n}\n\n"]}